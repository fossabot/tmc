openapi: 3.0.3
info:
  title: Thing Model Catalog - OpenAPI 3.0
  version: 0.1.2
  description: "This is the Thing Model Catalog API specification."
  contact: {}  
externalDocs:
  description: Find out more about Thing Model Catalog
  url: https://github.com/web-of-things-open-source/tm-catalog-cli
servers:
  - url: ''
security:
  - ApiKeyAuth: []
tags:
  - name: inventory
    description: Access to the inventory of the catalog
  - name: thing-models
    description: Access to Thing Model content
  - name: authors
    description: Access to authors information
  - name: manufacturers
    description: Access to manufacturers information
  - name: mpns
    description: Access to mpns (manufacturer part numbers) information
  - name: health
    description: Access to health information
  - name: internal
    description: Access to internal information
paths:
  /inventory:
    get:
      tags:
        - inventory
      summary: Get the inventory of the catalog
      description: Returns the catalogs inventory
      operationId: getInventory
      parameters:
        - name: 'filter.author'
          in: query
          description: |
            Filters the inventory by one or more authors having exact match.  
            The filter works additive to other filters.
          schema:
            type: string
          example: 'MyCompany,siemens'
        - name: 'filter.manufacturer'
          in: query
          description: |
            Filters the inventory by one or more manufacturers having exact match.  
            The filter works additive to other filters.
          schema:
            type: string
          example: 'BarTech,siemens'
        - name: 'filter.mpn'
          in: query
          description: |
            Filters the inventory by one ore more mpn (manufacturer part number) having exact match.   
            The filter works additive to other filters.
          schema:
            type: string
          example: 'BazLamp,POC1000'
        - name: 'filter.name'
          in: query
          description: |
            Filters the inventory by inventory entry name having a prefix match of full path parts.   
            The filter works additive to other filters.
          schema:
            type: string
          example: 'siemens/POC1000'
        - name: 'search'
          in: query
          description: |
            Filters the inventory according to whether the content of the inventory entries matches the given search.    
            The search works additive to other filters.
          schema:
            type: string
          example: ''
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryResponse'
              examples:
                inventory:
                  $ref: '#/components/examples/InventoryResponseExample'
        '400':
          description: Invalid filter parameter supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: Upstream repository error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /inventory/{name}:
    get:
      tags:
        - inventory
      summary: Get an inventory entry by it's name
      description: Returns a single inventory entry
      operationId: getInventoryByName
      parameters:
        - name: name
          in: path
          description: Name of the inventory entry
          required: true
          schema:
            type: string
          example: 'siemens/POC1000'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryEntryResponse'
              examples:
                inventoryEntry:
                  $ref: '#/components/examples/InventoryEntryResponseExample'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Inventory entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /inventory/{name}/.versions:
    get:
      tags:
        - inventory
      summary: Get the versions of an inventory entry
      description: Returns the versions of an inventory entry by its name
      operationId: getInventoryVersionsByName
      parameters:
        - name: name
          in: path
          description: Name of the inventory entry
          required: true
          schema:
            type: string
          example: 'siemens/POC1000'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryEntryVersionsResponse'
              examples:
                inventoryVersions:
                  $ref: '#/components/examples/InventoryEntryVersionsResponseExample'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Inventory entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /thing-models/{tmIDOrName}:
    get:
      tags:
        - thing-models
      summary: Get the content of a Thing Model by its ID or fetch name
      description: > 
        Returns the actual content of a Thing Model.
        The Thing Model is selected by the ID or fetch name. Fetch name is defined as \<name\>[:\<semver\>], 
        where \<name\> is the inventory name, \<semver\> is a full or partial semantic version.
        Using \<semver\> will return the most recent version of the TM that matches the provided part of semantic version
      operationId: getThingModelById
      parameters:
        - name: tmIDOrName
          in: path
          description: ID or fetch name of the Thing Model
          required: true
          schema:
            type: string
          examples:
            id:
              value: 'siemens/POC1000/v0.0.0-20231201133246-e1594d08a01b.tm.json'
            fullVersion:
              value: 'siemens/POC1000:v1.2.3'
            major:
              value: 'siemens/POC1000:1'
            majorMinor:
              value: 'siemens/POC1000:1.2'
      responses:
        '200':
          description: |
            Successful operation 

            **For the schema of the returned Thing Model see** [Thing Model JSON schema](https://github.com/w3c/wot-thing-description/blob/main/validation/tm-json-schema-validation.json)
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Invalid ID or fetch name supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Content of the Thing Model not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /thing-models:
    post:
      tags:
        - thing-models
      summary: Push a new Thing Model
      description: Push a new Thing Model
      operationId: pushThingModel
      requestBody:
        description: |
          Push a new Thing Model  
          
          **For the schema of a Thing Model see** [Thing Model JSON schema](https://github.com/w3c/wot-thing-description/blob/main/validation/tm-json-schema-validation.json)
        content:
          application/json:
            schema:
              type: object
            examples:
              payload:
                $ref: '#/components/examples/PushPayloadExample'
        required: true
      responses:
        '201':
          description: Successfully pushed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushThingModelResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: Conflict, Thing Model already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /authors:
    get:
      tags:
        - authors
      summary: Get the contained authors of the inventory
      description: Returns the contained authors of the inventory
      operationId: getAuthors
      parameters:
        - name: 'filter.manufacturer'
          in: query
          description: |
            Filters the authors according to whether they have inventory entries  
            which belong to at least one of the given manufacturers with an exact match.  
            The filter works additive to other filters.
          schema:
            type: string
          example: 'BarTech,siemens'
        - name: 'filter.mpn'
          in: query
          description: |
            Filters the authors according to whether they have inventory entries    
            which belong to at least one of the given mpn (manufacturer part number) with an exact match.    
            The filter works additive to other filters.
          schema:
            type: string
          example: 'BazLamp,POC1000'
        - name: 'search'
          in: query
          description: |
            Filters the authors according to whether they have inventory entries  
            where their content matches the given search.      
            The search works additive to other filters.
          schema:
            type: string
          example: ''
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorsResponse'
              examples:
                authors:
                  $ref: '#/components/examples/AuthorsResponseExample'
        '400':
          description: Invalid filter parameter supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /manufacturers:
    get:
      tags:
        - manufacturers
      summary: Get the contained manufacturers of the inventory
      description: Returns the contained manufacturers of the inventory
      operationId: getManufacturers
      parameters:
        - name: 'filter.author'
          in: query
          description: |
            Filters the manufacturers according to whether they belong to at least one of the given authors with an exact match.       
            The filter works additive to other filters.
          schema:
            type: string
          example: 'MyCompany,siemens'
        - name: 'filter.mpn'
          in: query
          description: |
            Filters the manufacturers according to whether they have inventory entries    
            which belong to at least one of the given mpn (manufacturer part number) with an exact match.    
            The filter works additive to other filters.
          schema:
            type: string
          example: 'BazLamp,POC1000'
        - name: 'search'
          in: query
          description: |
            Filters the manufacturers according to whether they have inventory entries  
            where their content matches the given search.      
            The search works additive to other filters.
          schema:
            type: string
          example: ''
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManufacturersResponse'
              examples:
                manufacturers:
                  $ref: '#/components/examples/ManufacturersResponseExample'
        '400':
          description: Invalid filter parameter supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /mpns:
    get:
      tags:
        - mpns
      summary: Get the contained mpns (manufacturer part numbers) of the inventory
      description: Returns the mpns (manufacturer part numbers) of the inventory
      operationId: getMpns
      parameters:
        - name: 'filter.author'
          in: query
          description: |
            Filters the mpns according to whether they belong to at least one of the given authors with an exact match.     
            The filter works additive to other filters.
          schema:
            type: string
          example: 'MyCompany,siemens'
        - name: 'filter.manufacturer'
          in: query
          description: |
            Filters the mpns according to whether they belong to at least one of the given manufacturers with an exact match.     
            The filter works additive to other filters.
          schema:
            type: string
          example: 'BarTech,siemens'
        - name: 'search'
          in: query
          description: |
            Filters the mpns according to whether their inventory entry content matches the given search.        
            The search works additive to other filters.
          schema:
            type: string
          example: ''
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MpnsResponse'
              examples:
                mpns:
                  $ref: '#/components/examples/MpnsResponseExample'
        '400':
          description: Invalid filter parameter supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /healthz:
    get:
      tags:
        - health
      summary: Get the overall health of the service
      security:
        - {}
      description: Get the overall health of the service, aggregates the responses from the /health/live and /health/ready
      operationId: getHealth
      responses:
        '204':
          description: Successful operation
          headers:
            Cache-Control:
              schema:
                type: string
                default: 'no-cache, no-store, max-age=0, must-revalidate'
              description: 'no-cache, no-store, max-age=0, must-revalidate'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /healthz/live:
    get:
      tags:
        - health
      summary: Returns the liveliness of the service
      security:
        - {}
      description: Returns the liveliness of the service, or whether it encountered a bug or deadlock
      operationId: getHealthLive
      responses:
        '204':
          description: Successful operation
          headers:
            Cache-Control:
              schema:
                type: string
                default: 'no-cache, no-store, max-age=0, must-revalidate'
              description: 'no-cache, no-store, max-age=0, must-revalidate'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /healthz/ready:
    get:
      tags:
        - health
      summary: Returns the readiness of the service
      security:
        - {}
      description: Returns the readiness of the service, or whether it is ready to process requests
      operationId: getHealthReady
      responses:
        '204':
          description: Successful operation
          headers:
            Cache-Control:
              schema:
                type: string
                default: 'no-cache, no-store, max-age=0, must-revalidate'
              description: 'no-cache, no-store, max-age=0, must-revalidate'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /healthz/startup:
    get:
      tags:
        - health
      summary: Returns whether the service is initialized
      security:
        - {}
      description: Returns whether the service is initialized
      operationId: getHealthStartup
      responses:
        '204':
          description: Successful operation
          headers:
            Cache-Control:
              schema:
                type: string
                default: 'no-cache, no-store, max-age=0, must-revalidate'
              description: 'no-cache, no-store, max-age=0, must-revalidate'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /.completions:
    get:
      tags:
        - internal
      summary: Get completions for shell completion script
      description: |
        For internal use only! Not to be relied on for any production purposes. 
        Returned results may not be complete or the signature may change incompatibly at any time.
        
        Get completions for shell completion script
      operationId: getCompletions
      parameters:
        - name: 'kind'
          in: query
          description: |
            Kind of data to complete
          schema:
            type: string
            enum:
              - 'names'
              - 'fetchNames'
        - name: 'toComplete'
          in: query
          description: |
            Data to complete
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            text/plain:
              schema:
                type: array
        '400':
          description: Illegal query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Completions could not be built
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    InventoryEntry:
      required:
        - name
        - schema:author
        - schema:manufacturer
        - schema:mpn
        - versions
      type: object
      properties:
        name:
          type: string
          example: 'siemens/POC1000'
        schema:author:
          $ref: '#/components/schemas/SchemaAuthor'
        schema:manufacturer:
          $ref: '#/components/schemas/SchemaManufacturer'
        schema:mpn:
          type: string
          example: 'POC1000'
        versions:
          type: array
          items:
            $ref: '#/components/schemas/InventoryEntryVersion'
        links:
          $ref: '#/components/schemas/InventoryEntryLinks'
    InventoryEntryVersion:
      required:
        - tmID
        - externalID
        - description
        - timestamp
        - digest
        - version
      type: object
      properties:
        tmID:
          type: string
          example: 'siemens/POC1000/v0.0.0-20231201133246-e1594d08a01b.tm.json'
        externalID:
          type: string
          example: 'e7f19370-84a3-11ee-b962-0242ac120002'
        description:
          type: string
          example: 'The Powercenter 1000 is a data transceiver for SENTRON circuit protection devices.'
        digest:
          type: string
          example: 'e1594d08a01b'
        version:
          $ref: '#/components/schemas/ModelVersion'
        timestamp:
          type: string
          example: '20231201133246'
        links:
          $ref: '#/components/schemas/InventoryEntryVersionLinks'
    InventoryEntryLinks:
      type: object
      required:
        - self
      properties:
        self:
          type: string
          format: uri-reference
          example: './inventory/siemens/POC1000'
    InventoryEntryVersionLinks:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          format: uri-reference
          example: './thing-models/siemens/POC1000/v0.0.0-20231201133246-e1594d08a01b.tm.json'
    InventoryResponse:
      type: object
      required:
        - data
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        data:
          type: array
          items:
            $ref: '#/components/schemas/InventoryEntry'
    InventoryEntryResponse:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/InventoryEntry'
    InventoryEntryVersionsResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/InventoryEntryVersion'
    PushThingModelResponse:
      required:
        - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/PushThingModelResult'
    AuthorsResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            type: string
    ManufacturersResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            type: string
    MpnsResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            type: string
    SchemaAuthor:
      required:
        - schema:name
      type: object
      properties:
        schema:name:
          type: string
          example: 'siemens'
    SchemaManufacturer:
      required:
        - schema:name
      type: object
      properties:
        schema:name:
          type: string
          example: 'siemens'
    Meta:
      type: object
      properties:
        page:
          $ref: '#/components/schemas/MetaPage'
    MetaPage:
      required:
        - elements
      type: object
      properties:
        elements:
          type: integer
    ModelVersion:
      required:
        - model
      type: object
      properties:
        model:
          type: string
          example: '0.0.0'
    PushThingModelResult:
      required:
        - tmID
      type: object
      properties:
        tmID:
          type: string
          example: 'MyCompany/BarTech/BazLamp/v0.0.1-20240206122430-1fc13316b7d8.tm.json'
    ErrorResponse:
      required:
        - title
        - status
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
        instance:
          type: string
        code:
          type: string
        status:
          type: integer
  responses:
    UnauthorizedError:
      description: API key is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  examples:
    InventoryEntryVersionsResponseExample:
      value:
        data:
          - 'description': 'The Powercenter 1000 is a data transceiver for SENTRON circuit protection devices.'
            'digest': '2cd14601ef09'
            'externalID': '{{ID}}'
            'links':
              'content': './thing-models/siemens/POC1000/v1.0.0-20240108112117-2cd14601ef09.tm.json'
            'timestamp': '20240108112117'
            'tmID': 'siemens/POC1000/v1.0.0-20240108112117-2cd14601ef09.tm.json'
            'version':
              'model': '1.0.0'
          - 'description': 'The Powercenter 1000 is a data transceiver for SENTRON circuit protection devices.'
            'digest': 'f4184d08a02c'
            'externalID': '{{ID}}'
            'links':
              'content': './thing-models/siemens/POC1000/v0.0.0-20231217140234-f4184d08a02c.tm.json'
            'timestamp': '20231217140234'
            'tmID': 'siemens/POC1000/v0.0.0-20231217140234-f4184d08a02c.tm.json'
            'version':
              'model': '0.0.0'
          - 'description': ''
            'digest': 'e1594d08a01b'
            'externalID': '{{ID}}'
            'links':
              'content': './thing-models/siemens/POC1000/v0.0.0-20231201133246-e1594d08a01b.tm.json'
            'timestamp': '20231201133246'
            'tmID': 'siemens/POC1000/v0.0.0-20231201133246-e1594d08a01b.tm.json'
            'version':
              'model': '0.0.0'
    InventoryEntryResponseExample:
      value:
        data:
          'links':
            'self': './inventory/siemens/POC1000'
          'name': 'siemens/POC1000'
          'schema:author':
            'schema:name': 'siemens'
          'schema:manufacturer':
            'schema:name': 'siemens'
          'schema:mpn': 'POC1000'
          'versions':
            - 'description': 'The Powercenter 1000 is a data transceiver for SENTRON circuit protection devices.'
              'digest': '2cd14601ef09'
              'externalID': '{{ID}}'
              'links':
                'content': './thing-models/siemens/POC1000/v1.0.0-20240108112117-2cd14601ef09.tm.json'
              'timestamp': '20240108112117'
              'tmID': 'siemens/POC1000/v1.0.0-20240108112117-2cd14601ef09.tm.json'
              'version':
                'model': '1.0.0'
            - 'description': 'The Powercenter 1000 is a data transceiver for SENTRON circuit protection devices.'
              'digest': 'f4184d08a02c'
              'externalID': '{{ID}}'
              'links':
                'content': './thing-models/siemens/POC1000/v0.0.0-20231217140234-f4184d08a02c.tm.json'
              'timestamp': '20231217140234'
              'tmID': 'siemens/POC1000/v0.0.0-20231217140234-f4184d08a02c.tm.json'
              'version':
                'model': '0.0.0'
            - 'description': ''
              'digest': 'e1594d08a01b'
              'externalID': '{{ID}}'
              'links':
                'content': './thing-models/siemens/POC1000/v0.0.0-20231201133246-e1594d08a01b.tm.json'
              'timestamp': '20231201133246'
              'tmID': 'siemens/POC1000/v0.0.0-20231201133246-e1594d08a01b.tm.json'
              'version':
                'model': '0.0.0'
    InventoryResponseExample:
      value:
        meta:
          page:
            elements: 2
        data:
          - 'links':
              'self': './inventory/siemens/POC1000'
            'name': 'siemens/POC1000'
            'schema:author':
              'schema:name': 'siemens'
            'schema:manufacturer':
              'schema:name': 'siemens'
            'schema:mpn': 'POC1000'
            'versions':
              - 'description': 'The Powercenter 1000 is a data transceiver for SENTRON circuit protection devices.'
                'digest': '2cd14601ef09'
                'externalID': '{{ID}}'
                'links':
                  'content': './thing-models/siemens/POC1000/v1.0.0-20240108112117-2cd14601ef09.tm.json'
                'timestamp': '20240108112117'
                'tmID': 'siemens/POC1000/v1.0.0-20240108112117-2cd14601ef09.tm.json'
                'version':
                  'model': '1.0.0'
              - 'description': 'The Powercenter 1000 is a data transceiver for SENTRON circuit protection devices.'
                'digest': 'f4184d08a02c'
                'externalID': '{{ID}}'
                'links':
                  'content': './thing-models/siemens/POC1000/v0.0.0-20231217140234-f4184d08a02c.tm.json'
                'timestamp': '20231217140234'
                'tmID': 'siemens/POC1000/v0.0.0-20231217140234-f4184d08a02c.tm.json'
                'version':
                  'model': '0.0.0'
              - 'description': ''
                'digest': 'e1594d08a01b'
                'externalID': '{{ID}}'
                'links':
                  'content': './thing-models/siemens/POC1000/v0.0.0-20231201133246-e1594d08a01b.tm.json'
                'timestamp': '20231201133246'
                'tmID': 'siemens/POC1000/v0.0.0-20231201133246-e1594d08a01b.tm.json'
                'version':
                  'model': '0.0.0'
          - 'links':
              'self': './inventory/MyCompany/BarTech/BazLamp'
            'name': 'MyCompany/BarTech/BazLamp'
            'schema:author':
              'schema:name': 'MyCompany'
            'schema:manufacturer':
              'schema:name': 'BarTech'
            'schema:mpn': 'BazLamp'
            'versions':
               - 'description': 'The BarTech BazLamp is a modern smart floor lamp.'
                 'digest': '1fc13316b7d8'
                 'externalID': 'e7f19370-84a3-11ee-b962-0242ac120002'
                 'links':
                   'content': './thing-models/MyCompany/BarTech/BazLamp/v0.0.1-20240206122430-1fc13316b7d8.tm.json'
                 'timestamp': '20240206122430'
                 'tmID': 'MyCompany/BarTech/BazLamp/v0.0.1-20240206122430-1fc13316b7d8.tm.json'
                 'version':
                  'model': '0.0.1'
    AuthorsResponseExample:
      value:
        data:
          - 'MyCompany'
          - 'siemens'
    ManufacturersResponseExample:
      value:
        data:
          - 'BarTech'
          - 'siemens'
    MpnsResponseExample:
      value:
        data:
          - 'BazLamp'
          - 'POC1000'
    PushPayloadExample:
      value:
        '@context':
           -  'https://www.w3.org/2022/wot/td/v1.1'
           - schema:
               'https://schema.org/'
        '@type': 'tm:ThingModel'
        'id': 'e7f19370-84a3-11ee-b962-0242ac120002'
        'title': 'BazLamp Smart'
        'description': 'The BarTech BazLamp is a modern smart floor lamp.'
        'schema:author':
          'schema:name': 'MyCompany'
        'schema:manufacturer':
          'schema:name': 'BarTech'
        'schema:mpn': 'BazLamp'
        'version':
          'model': 'v0.0.1'
        'properties':
          'status':
            'description': 'current status of the lamp (on|off)'
            'type': 'string'
            'readOnly': true
        'actions':
          'toggle':
            'description': 'Turn the lamp on or off'
        'events':
          'overheating':
            'description': 'Lamp reaches a critical temperature (overheating)'
            'data':
              'type': 'string'
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: apikey
